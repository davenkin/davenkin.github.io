allprojects {
  apply plugin: 'jacoco'
}

task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects 
    subprojects.each {
       sourceSets it.sourceSets.main
    }

    reports {
      xml.enabled true
      html.enabled true
      html.destination "${buildDir}/reports/jacoco"
      csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}

task checkTestCoverage << {
    def coverageReportPath = "build/reports/jacoco/test/html/index.html"
    def coverageFile = new File(coverageReportPath)
    def matcher = ( coverageFile.text =~ /<tfoot>(.*)<\/tfoot>/ )
    def coverageString = new XmlParser().parseText(matcher[0][0])

    def lineCoverageString = coverageString.tr.td[2].text()
    def branchCoverageString = coverageString.tr.td[4].text()
    def actualLineCoverage=  lineCoverageString.substring(0,lineCoverageString.length() - 1).toInteger()
    def actualBranchCoverage=  branchCoverageString.substring(0,branchCoverageString.length() - 1).toInteger()

    if(actualLineCoverage < expectedLineCoverage )
    {
        throw new RuntimeException("Code line coverage is "+actualLineCoverage+"%, but expected is "+expectedLineCoverage+"%.\n"+"Please check "+coverageReportPath +" for more detail.")
    }

    if(actualBranchCoverage < expectedBranchCoverage )
    {
        throw new RuntimeException("Code branch coverage is "+actualBranchCoverage+"%, but expected is "+expectedBranchCoverage+"%.\n"+"Please check "+coverageReportPath +" for more detail.")
    }
}

